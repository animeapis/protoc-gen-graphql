# DO NOT EDIT! Generated by protoc-gen-graphql.

type Image_Query {
  """
  Gets an image album.
  """
  getAlbum(input: GetAlbumRequestInput!): Album!
  """
  Lists image albums with pagination.
  """
  listAlbums(input: ListAlbumsRequestInput!): ListAlbumsResponse!
  """
  Gets the settings of an image album.
  """
  getAlbumSettings(input: GetAlbumSettingsRequestInput!): AlbumSettings!
}

type Image_Mutation {
  """
  Uploads an image through the request HttpBody.
  """
  uploadImage(input: UploadImageRequestInput!): UploadImageResponse!
  """
  Imports an image from a remote web address.
  """
  importImage(input: ImportImageRequestInput!): ImportImageResponse!
  """
  Creates a new image album.
  """
  createAlbum(input: CreateAlbumRequestInput!): Album!
  """
  Deletes an existing image album.
  """
  deleteAlbum(input: DeleteAlbumRequestInput!): Boolean!
  """
  Updates the settings of an image album.
  """
  updateAlbumSettings(input: UpdateAlbumSettingsRequestInput!): AlbumSettings!
}

"""
The image router is used to generate public links that can be routed through
the Animeshon CDN (Content Delivery Network) to guarantee high performance
and availability worldwide.
"""
type ImageRouter_Query {
  """
  Gets the image public link address that is used to fetch images via CDN.
  """
  getImageRoute(input: GetImageRouteRequestInput!): GetImageRouteResponse!
  """
  Routes a raw request received by a CDN host to its target image.
  """
  routeImage(input: RouteImageRequestInput!): HttpBody!
}

type Album {
  """
  The album resource name.
  """
  name: String!
  """
  The album display name.
  """
  displayName: String!
}

input AlbumInput {
  """
  The album resource name.
  """
  name: String
  """
  The album display name.
  """
  displayName: String
}

type AlbumSettings {
  """
  The album resource name.
  """
  name: String!
  """
  The bucket where to store resources.
  """
  bucket: String!
  """
  Whether the album is system managed.
  """
  systemManaged: Boolean!
  """
  Whether images in this album show up in the search engine results.
  """
  enableSearch: Boolean!
  """
  Whether images in this album can be annotated.
  """
  enableAnnotation: Boolean!
  """
  Whether images in this album must be client-side encrypted.
  """
  enableEncryption: Boolean!
  """
  Whether the content of this album is highly visible by the public such as
  profile pictures and banners. Highly visible albums *cannot* contain
  sensitive or adult images.
  """
  highVisibility: Boolean!
}

input AlbumSettingsInput {
  """
  The album resource name.
  """
  name: String
  """
  The bucket where to store resources.
  """
  bucket: String
  """
  Whether the album is system managed.
  """
  systemManaged: Boolean
  """
  Whether images in this album show up in the search engine results.
  """
  enableSearch: Boolean
  """
  Whether images in this album can be annotated.
  """
  enableAnnotation: Boolean
  """
  Whether images in this album must be client-side encrypted.
  """
  enableEncryption: Boolean
  """
  Whether the content of this album is highly visible by the public such as
  profile pictures and banners. Highly visible albums *cannot* contain
  sensitive or adult images.
  """
  highVisibility: Boolean
}

input UploadImageRequestInput {
  """
  The image parent of the image. This value defaults to the user performing
  the upload operation if no parent is set.
  """
  parent: String!
  """
  The image content, represented as an HttpBody.
  """
  body: HttpBodyInput
}

type UploadImageResponse {
  """
  The image resource name.
  """
  name: String!
}

input ImportImageRequestInput {
  """
  The image parent of the image. This value defaults to the user performing
  the import operation if no parent is set.
  """
  parent: String!
  """
  A publicly-accessible image HTTP/HTTPS URL. When fetching images from
  HTTP/HTTPS URLs, Animeshon cannot guarantee that the request will be
  completed. Your request may fail if the specified host denies the
  request (e.g. due to request throttling or DoS prevention), or if
  Animeshon throttles requests to the site for abuse prevention. You should
  not depend on externally-hosted images for production applications.
  """
  uri: String!
  """
  The web cache options to apply to the import request.
  """
  cacheOptions: ImportImageRequest_WebCacheOptionsInput
}

"""
The WebCache options to be used when importing an image from a public
website address.
"""
input ImportImageRequest_WebCacheOptionsInput {
  """
  If refresh is set to true the image is imported from the remote address
  regardless of an existing local cache, if the fetched image does not
  match the existing cache the new image is stored and a new resource is
  created, otherwise the existing (cached) resource is returned.
  """
  refresh: Boolean
  """
  If ignore is set to true no cache lookup is performed and the image is
  imported into a new resource. If both "ignore" and "refresh" are set to
  true then "refresh" has no effect.
  """
  ignore: Boolean
}

type ImportImageResponse {
  """
  The response is either the imported image or a remote error with details.
  """
  response: ImportImageResponse_ResponseOneof
  """
  Whether this image was found in the cache.
  """
  cacheHit: Boolean!
}

"""
`ImportImageResponse_ResponseOneof` represents the `response` oneof in `animeshon.image.v1alpha1.ImportImageResponse`.
"""
union ImportImageResponse_ResponseOneof = ImportImageResponse_ResponseOneof_Result | ImportImageResponse_ResponseOneof_Error

"""
`ImportImageResponse_ResponseOneof_Result` represents the `result` oneof field in `animeshon.image.v1alpha1.ImportImageResponse`.
"""
type ImportImageResponse_ResponseOneof_Result {
  _typename: String
  """
  If the import was successful this field will provide the newly created
  image resource name.
  """
  result: ImportImageResponse_ImportImageResult
}

"""
`ImportImageResponse_ResponseOneof_Error` represents the `error` oneof field in `animeshon.image.v1alpha1.ImportImageResponse`.
"""
type ImportImageResponse_ResponseOneof_Error {
  _typename: String
  """
  If the import ended up in a failure due to an error with the remote
  server this field will provide more details about the failure.
  """
  error: ImportImageResponse_ImportImageRemoteError
}

type ImportImageResponse_ImportImageResult {
  """
  The image resource name.
  """
  name: String!
}

type ImportImageResponse_ImportImageRemoteError {
  """
  The status code returned from the remote server.
  """
  statusCode: Int!
  """
  The details related to the import failure.
  """
  details: String!
}

input GetImageRequestInput {
  """
  The image resource name.
  """
  name: String!
  """
  If content type is set and differs from the original content type the image
  will be converted to match the specified content type.

  Note: only "image/png", "image/webp", "image/jpeg" are supported values.
  """
  contentType: String
  """
  The image bounding box to use for resizing. This value is normally used
  to request image thumbnails. If both width and height are defined then the
  value with smaller ratio will be used to resize the image. The resized
  image has the closest standard ratio to the requested width or height.
  If the requested ratio is larger than the original image it is ignored.
  """
  resize: GetImageRequest_ResizeBoundsInput
  """
  Whether the image returned should be blurred. This is typically used while
  routing images that have been detected to contain highly sensitive or
  controversial content that must be censored in some or all regions.
  """
  blur: Boolean
}

"""
The image resize bounds.
"""
input GetImageRequest_ResizeBoundsInput {
  """
  The image width.
  """
  width: Int
  """
  The image height.
  """
  height: Int
}

input GetAlbumRequestInput {
  """
  The name of the album to retrieve.
  """
  name: String!
}

input ListAlbumsRequestInput {
  """
  The parent, which owns this collection of albums.
  """
  parent: String!
  """
  If unspecified, server will pick an appropriate default.
  """
  pageSize: Int
  """
  The value returned from the previous call.
  """
  pageToken: String
  """
  A filter to be applied to results.
  """
  filter: String
}

type ListAlbumsResponse {
  """
  The list of albums.
  """
  albums: [Album!]!
  """
  A token to retrieve next page of results.
  """
  nextPageToken: String!
}

input CreateAlbumRequestInput {
  """
  The parent this album belongs to.
  """
  parent: String!
  """
  The album to create.
  """
  album: AlbumInput!
}

input DeleteAlbumRequestInput {
  """
  The album to delete.
  """
  name: String!
}

input GetAlbumSettingsRequestInput {
  """
  The name of the album to retrieve settings from.
  """
  name: String!
}

input UpdateAlbumSettingsRequestInput {
  """
  The album settings to update.
  """
  settings: AlbumSettingsInput!
  """
  The field mask to determine which fields are to be updated. If empty, the
  server will assume all fields are to be updated.
  """
  updateMask: FieldMaskInput
}

input GetImageRouteRequestInput {
  name: String!
}

type GetImageRouteResponse {
  """
  A routable url that points to a link address backed by the CDN.
  """
  url: String!
}

input RouteImageRequestInput {
  """
  The host that received the request.
  """
  host: String!
  """
  The requested path representing an opaque route.
  """
  path: String!
}
